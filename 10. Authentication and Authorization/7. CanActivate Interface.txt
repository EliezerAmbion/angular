Even if a user is logged out, they can still access the admin page by typing in the address bar /admin.
In Angular we have a concept called route guard, that we can apply in various routes to protect them.

COMPLETE CODE:

generated using angular cli
command: ng g s services/auth-guard

auth-guard.service.ts

import { AuthService } from "./auth.service";
import { Injectable } from "@angular/core";
import {
  ActivatedRouteSnapshot,
  CanActivate,
  Router,
  RouterStateSnapshot,
} from "@angular/router";
import { Observable } from "rxjs/Observable";

@Injectable()
export class AuthGuardService implements CanActivate {
  // NOTE: in order to check to see if the user is looged in or not, we need to inject our authService
  // NOTE: in order for us to navigate the user to the login page, we need to inject the router service.
  constructor(
    private readonly _authService: AuthService,
    private readonly _router: Router
  ) {}

  // NOTE: canActivate - in this method we need to check to see if the user is logged in or not.
  // If they're logged in we're going to return true.
  // Otherwise we should navigate the user to the login page, and return false.
  canActivate() {
    if (this._authService.isLoggedIn()) return true;

    // REMEMBER: in the parameters array of navigate, the first element is the path,
    // second element is optional.

    // NOTE: you can navigate a user to anywhere but the login page would be the best.
    this._router.navigate(["/login"]);
    return false;
  }
}

-------------------------------------------------------

app.module

import { AuthGuardService } from "./services/auth-guard.service";
import {
  AuthHttp,
  AUTH_PROVIDERS,
  provideAuth,
  AuthConfig,
} from "angular2-jwt/angular2-jwt";
import { OrderService } from "./services/order.service";
import { MockBackend } from "@angular/http/testing";
import { fakeBackendProvider } from "./helpers/fake-backend";
import { AuthService } from "./services/auth.service";
import { BrowserModule } from "@angular/platform-browser";
import { NgModule } from "@angular/core";
import { FormsModule } from "@angular/forms";
import { HttpModule, Http, BaseRequestOptions } from "@angular/http";
import { RouterModule } from "@angular/router";

import { AppComponent } from "./app.component";
import { HomeComponent } from "./home/home.component";
import { LoginComponent } from "./login/login.component";
import { SignupComponent } from "./signup/signup.component";
import { AdminComponent } from "./admin/admin.component";
import { NotFoundComponent } from "./not-found/not-found.component";
import { NoAccessComponent } from "./no-access/no-access.component";

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    SignupComponent,
    AdminComponent,
    HomeComponent,
    NotFoundComponent,
    NoAccessComponent,
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    RouterModule.forRoot([
      { path: "", component: HomeComponent },
      // NOTE: in this admin route, we can have another property called canActivate and we set this to an array.
      // In this array, we can add one or more route guards.

      // REMEMBER: with this technique we can reuse this authGuard and apply it on any route that should be protected from
      // anonymous users.
      {
        path: "admin",
        component: AdminComponent,
        canActivate: [AuthGuardService],
      },
      { path: "login", component: LoginComponent },
      { path: "no-access", component: NoAccessComponent },
    ]),
  ],
  providers: [
    OrderService,
    AuthGuardService,
    AuthService,

    // For creating a mock back-end. You don't need these in a real app.
    fakeBackendProvider,
    MockBackend,
    BaseRequestOptions,
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}
