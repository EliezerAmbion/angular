Imagine we have alot of services, like courses service and post services.
Instead of doing all the crud operations again and agin, you should have a main service class for this and implement it
in your child services that will use that main service.

You should create a service for working with HTTP endpoints. 
This will be the main service for create, update, get, and delete.

NOTE: the super keyword is used in order for you to call the constructor of the base class, in this case, the base class is
the DataService class in data.service.ts

IMPORTANT: As I encounter with same error myself, with same notation I believe you've watched 'Mosh' angular course which was belong to version 4.

There were several changes since then, one of them is replacing Http with HttpClient, another one was huge changes in rxjs library,
needless to say same happened for services. 

NOTE: Now instead of putting your services in providers you use @Injectable method which I think is more cleaner and more 
related to the service itself.

However if you had close attention to implementation you'll notice that DataService is just a base class and it would never be use
as a service itself.It's like a manifest.So, it does not need to be injected or provided in app module. If you can recall 'Mosh'
never did provide it in App module.The only service that was provided was PostService. That's why you should remove @Injectable
decoration from DataService.

COMPLETE CODE:
=================================================================
data.service.ts:

NOTE: you DON'T need to put @Injectable here because this is just a base service for all other services
you want to use this base service.
NOTE: you DON'T need to create a base service using the ANGULAR CLI

import { HttpClient } from '@angular/common/http';

export class DataService {
  constructor(private url: string, private http: HttpClient) {}

  get() {
    return this.http.get(this.url);
  }

  create(resource: any) {
    return this.http.post(this.url, JSON.stringify(resource));
  }

  update(resource: any) {
    return this.http.patch(
      this.url + '/' + resource.id,
      JSON.stringify({ isRead: true })
    );
  }

  delete(id: any) {
    return this.http.delete(this.url + '/' + id);
  }
}


=================================================================

post.service.ts

import { DataService } from './data.service';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class PostService extends DataService {
  constructor(http: HttpClient) {
    super('https://jsonplaceholder.typicode.com/posts', http);
  }
}


=================================================================

posts.component.ts:

import { PostService } from './../services/post.service';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-posts',
  templateUrl: './posts.component.html',
  styleUrls: ['./posts.component.css'],
})
export class PostsComponent implements OnInit {
  posts: any;

  constructor(private postService: PostService) {}

  ngOnInit() {
    this.postService.get().subscribe((response) => {
      (this.posts = response),
        (err: any) => console.log(err),
        () => console.log('Complete');
    });
  }

  createPost(input: HTMLInputElement) {
    let post: any = { title: input.value };
    input.value = '';

    this.postService.create(post).subscribe((response: any) => {
      post.id = response.id;
      this.posts.unshift(post);
    });
  }

  updatePost(post: any) {
    this.postService.update(post).subscribe((response) => {
      console.log(response);
    });
  }

  deletePost(post: any) {
    this.postService.delete(post.id).subscribe((response) => {
      let index = this.posts.indexOf(post);
      this.posts.splice(index, 1);
    });
  }
}
