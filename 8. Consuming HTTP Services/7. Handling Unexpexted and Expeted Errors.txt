In subscribe method, there is an optional parameter that is named error.
You can see the indication that it is optional with a question mark.

NOTE: ALL THE ERRORS SHOULD BE IN THE SERVICE AS WELL. (watch mosh angular video 111 - SEPARATION OF CONCERNS)

===========================================================================
posts.component.ts:

import { PostService } from './../services/post.service';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-posts',
  templateUrl: './posts.component.html',
  styleUrls: ['./posts.component.css'],
})
export class PostsComponent implements OnInit {
  posts: any;

  constructor(private postService: PostService) {}

  ngOnInit() {
    this.postService.getPosts().subscribe(
      (response) => {
        this.posts = response;
      },
      (error) => {
        console.log(`Unexpected Error has occured: ${error}`);
      }
    );
  }

  createPost(input: HTMLInputElement) {
    let post: any = { title: input.value };
    input.value = '';

    this.postService.createPost(post).subscribe(
      (response: any) => {
        post.id = response.id;
        this.posts.unshift(post);
      },
      (error: Response) => {
        if (error.status === 400) {
          // this.form.setError(error.json());
          console.log();
        } else {
          console.log(`Unexpected Error has occured: ${error}`);
        }
      }
    );
  }

  updatePost(post: any) {
    this.postService.updatePost(post).subscribe(
      (response) => {
        console.log(response);
      },
      (error) => {
        console.log(`Unexpected Error has occured: ${error}`);
      }
    );
  }

  deletePost(post: any) {
    this.postService.deletePost(post.id).subscribe(
      (response) => {
        let index = this.posts.indexOf(post);
        this.posts.splice(index, 1);
      },
      (error: Response) => {
        if (error.status === 404) {
          console.log('This post has already been deleted.');
        } else {
          console.log(`Unexpected Error has occured: ${error}`);
        }
      }
    );
  }
}
