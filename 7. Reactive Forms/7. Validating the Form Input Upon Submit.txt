We have a directive called ngForm that is applied to all form element by default.
This event exposes an output property or an event called ngSubmit.
We can use it in our event binding expressions.

e.g.
<form [formGroup]="form" (ngSubmit)="login()">

IMPORTANT: the FormGroup, FormControl, and FormArray classes derived from AbstractControl.
AbstractControl is the parent of these classes, it defines a set of common properties and methods that both these classes need. 
One of these methods is setErrors. 

If you are getting the data from the backend, you would want to get the data from a service.
sample code for validating with the service.
e.g.
login() {
  let isValid = authService.login(this.form.value);

  if (!isValid) {
    this.form.setErrors({
      invalidLogin: true
    })
  }
}

NOTE: we don't have any service yet, so this will be our code.
login() {
  this.form.setErrors({
    invalidLogin: true
  })
}

-----------------------------------------------------------------------------------
COMPLETE CODE:
signup form HTML:

NOTE: this is where we added the ngSubmit
<form [formGroup]="form" (ngSubmit)="login()">

  NOTE: this is where we put the validation error for login()
  <div *ngIf="form.errors" class="alert alert-danger">
    The username or password is invalid.
  </div>

    <div class="form-group">
        <label for="username">Username</label>
        <input 
        		formControlName="username"
            id="username" 
            type="text" 
            class="form-control">

        <div *ngIf="username.pending">Checking for uniqueness...</div>

        <div *ngIf="username.touched && username.invalid" class="alert alert-danger">

        	<div *ngIf="username.errors.required">Username is required.</div>
        	<div *ngIf="username.errors.minlength">Username should be minimum of {{ username.errors.minlength.requiredLength }}.</div>
        	<div *ngIf="username.errors.cannotContainSpace">Username cannot contain space.</div>
        	<div *ngIf="username.errors.shouldBeUnique">Username is already taken.</div>

        </div>
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input 
        		formControlName="password"
            id="password" 
            type="text" 
            class="form-control">
    </div>
    <button class="btn btn-primary" type="submit">Sign Up</button>
</form>

-----------------------------------------------------------------------------------
signup form TS:
import { Component } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';

@Component({
  selector: 'signup-form',
  templateUrl: './signup-form.component.html',
  styleUrls: ['./signup-form.component.css']
})
export class SignupFormComponent {
	form = new FormGroup({
		username: new FormGroup('', Validators.required, UsernameValidators.shouldBeUnique),
		password: new FormGroup('', Validators.required)
	});

  NOTE: this is where we put the basic validation.
  login() {
    this.form.setErrors({
      invalidLogin: true
    });
  }
	
	get username() {
		return this.form.get('username');
	}
}