Asynchronous means non blocking


import { AbstractControl, ValidationErrors } from '@angular/forms';

export class UsernameValidators {
  static cannotContainSpace(control: AbstractControl) : ValidationErrors | null {
    if ((control.value as string).indexOf(' ') >=0) {
      return { cannotContainSpace: true }
    } else {
      return null;
    }
  }

  // THIS IS THE METHOD FOR THIS FILE:
  static shouldBeUnique(control: AbstractControl)) : ValidationErrors | null {
    setTimeout(() => {
      if(control.value === 'mosh') {
        return { shouldBeUnique: true };
      } else{
        return null;
      }
    }, 2000)
  }
}
This will have a compilation error. The error will be "A function who's declared type is neither void nor any must return a value"
NOTE: The issue we have in this code is that these values returning here are not returned from our validator function.
They're returned from the callback function that we passed to the set timeout function.
In other words, we define this method (shouldBeUnique) and we set the return type of this method to validation errors or null.
But in this method, we are not returning any values, we are simple calling the setTimeout function.

The solution here is Asynchronous Validators.

IMPORTANT: THIS IS AN EXAMPLE OF A PROMISE. DON'T USE THIS - USE OBSERVABLE INSTEAD.

  static shouldBeUnique(control: AbstractControl)) : Promise<ValidationErrors | null> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if(control.value === 'mosh') {
          resolve({ shouldBeUnique: true });
        } else{
          resolve (null);
        }
      }, 2000)
    })
  }

NOTE: instead of using return, you will use resolve.

-------------------------------------------------------------------------------------------------------

signup form TS:
import { Component } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';

@Component({
  selector: 'signup-form',
  templateUrl: './signup-form.component.html',
  styleUrls: ['./signup-form.component.css']
})
export class SignupFormComponent {
	form = new FormGroup( {
		username: new FormGroup('', Validators.required, UsernameValidators.shouldBeUnique),
		password: new FormGroup('', Validators.required)
	});
	
	get username() {
		return this.form.get('username');
	}
}

-------------------------------------------------------------------------------------------------------

signup form HTML:
<form [formGroup]="form">
    <div class="form-group">
        <label for="username">Username</label>
        <input 
        		formControlName="username"
            id="username" 
            type="text" 
            class="form-control">
        <div *ngIf="username.touched && 'username.invalid" class="alert alert-danger">
        
        	<div *ngIf="username.errors.required">Username is required.</div>
        	
        	<div *ngIf="username.errors.minlength">Username should be minimum of {{ username.errors.minlength.requiredLength }}.</div>

        	<div *ngIf="username.errors.cannotContainSpace">Username cannot contain space.</div>
          
        	<div *ngIf="username.errors.shouldBeUnique">Username is already taken.</div>
        	
        </div>
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input 
        		formControlName="password"
            id="password" 
            type="text" 
            class="form-control">
    </div>
    <button class="btn btn-primary" type="submit">Sign Up</button>
</form>
