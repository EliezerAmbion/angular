COMPLETE CODE:
----------------------------------------------------------------------------------------------

host component HTML:
<app-favorite [isFavorite]='post.isFavorite' (change)="onFavoriteChanged()"></app-favorite>

----------------------------------------------------------------------------------------------

host component .ts:
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  post = {
    title: 'Test Title',
    isFavorite: false,
  };

  onFavoriteChanged() {
    console.log('clicked')
  }
}

----------------------------------------------------------------------------------------------

favorite component .ts:
import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-favorite',
  templateUrl: './favorite.component.html',
  styleUrls: ['./favorite.component.css'],
})
export class FavoriteComponent {
  @Input() isFavorite: boolean = false;
  @Output() change = new EventEmitter();

  constructor() {}

  onClick() {
    this.isFavorite = !this.isFavorite;
    this.change.emit();
  }
}

-----------------------------------------------------------------------------------------------


Output properties are used when you want to create or raise a custom event.
e.g.
<app-favorite [isFavorite]='post.isFavorite' (change)="onFavoriteChanged()"></app-favorite>

NOTE: The change is a custom event field from the app-favorite component.
NOTE: The onFavoriteChanged() is the method from your host component.
NOTE: You will get notified whenever a user clicked the favorite component.

In host component. create the method onFavoriteChanged():
e.g.
onFavoriteChanged() {
  console.log('clicked')
}

In favorite component, you need to import the decorator function from angular/core
-  import { Component, OnInit, Input, Output } from '@angular/core';

Then create a field named change and decorate this field with an Output decorator.
When you use an Output decorator, you should initialize this field to an instance of the EventEmitter class.
e.g.
@Output() change = new EventEmitter();

NOTE: Because EventEmitter is not a primitive type in TypeScript or in Javascript, you need to use the new operator
to create an instance of this class.

You need to import the EventEmitter from angular/core.
-  import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
Or just use the auto import plugin, then press ctrl + dot(.)

In favorite component, you want to raise an event by using emit method:
e.g.
onClick(){
  this.isFavorite = !this.isFavorite;
  this.change.emit();
}

NOTE: emit is used to raise or publish an event, which is basically means notifying others that somethings has happened.

-----------------------------------------------------------------------------------------------

you can alias an Output property as well.
e.g.
@Output('change') click = new EventEmitter();